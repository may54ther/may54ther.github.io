/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var p=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var h=Object.getOwnPropertyNames;var d=Object.prototype.hasOwnProperty;var m=(s,e)=>{for(var t in e)p(s,t,{get:e[t],enumerable:!0})},y=(s,e,t,l)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of h(e))!d.call(s,o)&&o!==t&&p(s,o,{get:()=>e[o],enumerable:!(l=u(e,o))||l.enumerable});return s};var v=s=>y(p({},"__esModule",{value:!0}),s);var g={};m(g,{default:()=>c});module.exports=v(g);var a=require("obsidian"),f=require("path"),c=class extends a.Plugin{async onload(){this.registerEvent(this.app.workspace.on("file-menu",(e,t)=>{(t instanceof a.TFile||t instanceof a.TFolder)&&e.addItem(l=>{l.setTitle("Copy absolute path").setIcon("copy").setSection("system").onClick(async()=>{await this.copyAbsolutePath(t)})})})),this.addCommand({id:"copy-absolute-path-active",name:"Copy path of active file",callback:()=>{let e=this.app.workspace.getActiveFile();e?this.copyAbsolutePath(e):new a.Notice("No active file to copy path from")}}),this.addCommand({id:"copy-absolute-path-focused",name:"Copy path of focused item (File Explorer)",checkCallback:e=>{let t=!!document.querySelector(".nav-files-container:hover"),l=!!document.querySelector(".is-being-renamed");if(!t||l){if(!e){let i=document.getSelection();i&&i.toString().length>0&&navigator.clipboard.writeText(i.toString()).catch(n=>{console.error("Fallback text copy failed:",n)})}return!1}let o=this.getFocusedItem();return o||(o=this.app.workspace.getActiveFile()),o?(e||this.copyAbsolutePath(o),!0):!1}}),this.app.workspace.onLayoutReady(()=>{setTimeout(()=>{let e=document.querySelector(".tree-item.nav-folder.oz-explorer-root-folder");e&&this.registerDomEvent(e,"contextmenu",t=>{t.preventDefault();let l=new a.Menu;l.addItem(o=>{o.setTitle("Copy absolute path").setIcon("copy").setSection("action").onClick(async()=>{let i=this.app.vault.adapter;if(i instanceof a.FileSystemAdapter){let n=i.getBasePath();try{await navigator.clipboard.writeText(n),new a.Notice(`Copied path: ${n}`)}catch(r){console.error("Failed to copy path:",r),new a.Notice("Failed to copy path to clipboard.")}}else new a.Notice("Cannot get path: vault is not using file system adapter")})}),l.showAtMouseEvent(t)})},500)})}async copyAbsolutePath(e){try{let t=this.app.vault.adapter;if(t instanceof a.FileSystemAdapter){let l=t.getBasePath(),o=(0,f.join)(l,e.path);await navigator.clipboard.writeText(o),new a.Notice(`Copied path: ${o}`)}else new a.Notice("Cannot get path: vault is not using file system adapter")}catch(t){console.error("Failed to copy path:",t),new a.Notice("Failed to copy path to clipboard")}}onunload(){}getFocusedItem(){let e=[".tree-item-self.has-focus .nav-file-title",".nav-file-title.has-focus"],t=[".tree-item-self.has-focus .nav-folder-title",".nav-folder-title.has-focus"],l=Array.from(document.querySelectorAll(e.join(", "))),o=Array.from(document.querySelectorAll(t.join(", "))),i=null;for(let n of l)if(n.matches(":hover")){i=n;break}if(!i){for(let n of o)if(n.matches(":hover")){i=n;break}}if(!i&&l.length>0&&(i=l[0]),!i&&o.length>0&&(i=o[0]),i){let n=this.getFilePathFromElement(i);if(n){let r=this.app.vault.getAbstractFileByPath(n);if(r)return r}}return null}getFilePathFromElement(e){let t=e.getAttribute("data-path");if(!t){let l=e.closest("[data-path]");l&&(t=l.getAttribute("data-path"))}return t}};

/* nosourcemap */